#!/usr/bin/env python

# This python script plots the output of a SFINCS convergence scan.

outputFilename = "sfincsOutput.h5"

hideRepeatedScales = True
#hideRepeatedScales = False

import matplotlib.pyplot as plt
import h5py
import numpy
import inspect, math

print "This is "+ inspect.getfile(inspect.currentframe())

numRuns = 0
Nthetas = []
Nzetas = []
Nxis = []
NLs = []
Nxs = []
NxPotentialsPerVths = []
xMaxs = []
solverTolerances = []

outputs = []

baseCaseIndex = -1

def uniq(seq):
   checked = []
   for e in seq:
       if e not in checked:
           checked.append(e)
   return checked

# Get a list of the subdirectories:                                                                        
directories = filter(os.path.isdir, os.listdir("."))

for directory in directories:
    filename = directory+"/"+outputFilename
    if not os.path.isfile(filename):
        print "Directory "+directory+" does not have a "+outputFilename+" file (yet)."
        continue

    try:
        f = h5py.File(filename,'r')
    except IOError:
        print "Unable to open "+filename+" even though this file exists."
        continue

    try:
        # Try reading a field that should definitely be present in the output file for any run that completed.
        dummy = f["FSABFlow"][()]
    except:
        print "Unable to read "+filename+" even though this file exists."
        continue

    try:
        finished = f["finished"]
    except KeyError:
        print "Run in directory "+directory+" does not appear to have finished."
        continue

    print "Processing directory "+directory

    # The expression [()] converts from an h5py dataset to a numpy ndarray:
    integerToRepresentTrue = (f["integerToRepresentTrue"][()])
    Nthetas.append(f["Ntheta"][()])
    Nzetas.append(f["Nzeta"][()])
    Nxis.append(f["Nxi"][()])
    NLs.append(f["NL"][()])
    Nxs.append(f["Nx"][()])
    NxPotentialsPerVths.append(f["NxPotentialsPerVth"][()])
    xMaxs.append(f["xMax"][()])
    solverTolerances.append(f["solverTolerance"][()])


    RHSMode_new = f["RHSMode"][()]
    Nspecies_new = f["Nspecies"][()]
    includePhi1_new = (f["includePhi1"][()] == integerToRepresentTrue)
    if numRuns == 0:
        RHSMode = RHSMode_new
        Nspecies = Nspecies_new
        includePhi1 = includePhi1_new
    else:
        if RHSMode != RHSMode_new:
            print "Error! RHSMode is not consistent among runs."
            exit(1)
        if Nspecies != Nspecies_new:
            print "Error! Nspecies is not consistent among runs."
            exit(1)
        if includePhi1 != includePhi1_new:
            print "Error! includePhi1 is not consistent among runs."
            exit(1)

    if RHSMode != 1 and RHSMode != 2 and RHSMode != 3:
        print "Error! sfincsScanPlot is not yet set up for RHSMode = "+str(RHSMode)
        exit(1)

    FSABFlow = f["FSABFlow"][()]
    FSABjHat = f["FSABjHat"][()]
    particleFlux_vm = f["particleFlux_vm_psiHat"][()]
    heatFlux_vm = f["heatFlux_vm_psiHat"][()]
    elapsedTime = f["elapsed time (s)"][()]
    if RHSMode>1:
       transportMatrix = f["transportMatrix"][()]
    if includePhi1:
        particleFlux_vd = f["particleFlux_vd_psiHat"][()]
        heatFlux_vd = f["heatFlux_vd_psiHat"][()]

    if RHSMode > 1:
       results = []
       for icol in range(transportMatrix.shape[1]):
          for irow in range(transportMatrix.shape[0]):
             results.append(transportMatrix[irow,icol])
       outputs.append(results)
    else:
       if Nspecies==1:
          if includePhi1:
             outputs.append([FSABFlow[0,0],particleFlux_vm[0,0],particleFlux_vd[0,0],heatFlux_vm[0,0],heatFlux_vd[0,0]])
          else:
             outputs.append([FSABFlow[0,0],particleFlux_vm[0,0],heatFlux_vm[0,0],elapsedTime])
       else:
          results = []
          iteration = -1
          for ispecies in range(Nspecies):
             if includePhi1:
                results.append(FSABFlow[ispecies,iteration])
                results.append(particleFlux_vm[ispecies,iteration])
                results.append(particleFlux_vd[ispecies,iteration])
                results.append(heatFlux_vm[ispecies,iteration])
                results.append(heatFlux_vd[ispecies,iteration])
             else:
                results.append(FSABFlow[ispecies,iteration])
                results.append(particleFlux_vm[ispecies,iteration])
                results.append(heatFlux_vm[ispecies,iteration])
          results.append(FSABjHat[iteration])
          outputs.append(results)

    if directory=="baseCase":
        baseCaseIndex=numRuns
    numRuns += 1

    print "Successfully read run in directory "+directory
 

if baseCaseIndex<0:
    print "Error! No baseCase run available."
    exit(1)

if RHSMode>1:
   yAxisLabels=[]
   numRows = transportMatrix.shape[0]*transportMatrix.shape[1]
   for icol in range(transportMatrix.shape[1]):
      for irow in range(transportMatrix.shape[0]):
         yAxisLabels.append("L"+str(irow+1)+str(icol+1))
else:
   if Nspecies==1:
      if includePhi1:
         numRows = 5
         yAxisLabels=["FSABFlow","particleFlux\nvm_psiHat","particleFlux\nvd_psiHat","heatFlux\nvm_psiHat","heatFlux\nvd_psiHat"]
      else:
         numRows = 4
         yAxisLabels=["FSABFlow","particleFlux\nvm_psiHat","heatFlux\nvm_psiHat","elapsed time (s)"]
   else:
      if includePhi1:
         numRows = Nspecies*5+1
         yAxisLabels=[]
         for i in range(1,Nspecies+1):
            yAxisLabels.append("FSABFlow\n(species "+str(i)+")")
            yAxisLabels.append("particleFlux\nvm_psiHat\n(species "+str(i)+")")
            yAxisLabels.append("particleFlux\nvd_psiHat\n(species "+str(i)+")")
            yAxisLabels.append("heatFlux\nvm_psiHat\n(species "+str(i)+")")
            yAxisLabels.append("heatFlux\nvd_psiHat\n(species "+str(i)+")")
         yAxisLabels.append("FSABjHat")
        
      else:
         numRows = Nspecies*3+1
         yAxisLabels=[]
         for i in range(1,Nspecies+1):
            yAxisLabels.append("FSABFlow\n(species "+str(i)+")")
            yAxisLabels.append("particleFlux\nvm_psiHat\n(species "+str(i)+")")
            yAxisLabels.append("heatFlux\nvm_psiHat\n(species "+str(i)+")")
         yAxisLabels.append("FSABjHat")
            
parametersToVary = []
abscissae = []
convergeds = []
quantities = []

# Check whether Ntheta was scanned:
data = Nthetas
values = uniq(data)
values.sort()
if len(values)>1:
    # Yes, a scan was performed in this variable.
    parametersToVary.append("Ntheta")
    abscissae.append(values)
    # Ensure only 1 value is repeated:
    numRepeatedValues = 0
    for value in values:
        if data.count(value)>1:
            numRepeatedValues += 1
            convergedValue = value
    if numRepeatedValues>1:
        print "Error! Multiple values of "+parametersToVary[-1]+" were repeated."
        exit(1)
    thisScanResults = []
    for value in values:
        if value==convergedValue:
            index = baseCaseIndex
        else:
            index = data.index(value)
        thisScanResults.append(outputs[index])
    print "A scan was performed in "+parametersToVary[-1]+", and the repeated value was "+str(convergedValue)
    print "Values of the scanned parameter: ",abscissae[-1]
    convergeds.append(convergedValue)
    quantities.append(numpy.array(thisScanResults))

# Check whether Nzeta was scanned:
data = Nzetas
values = uniq(data)
values.sort()
if len(values)>1:
    # Yes, a scan was performed in this variable.
    parametersToVary.append("Nzeta")
    abscissae.append(values)
    # Ensure only 1 value is repeated:
    numRepeatedValues = 0
    for value in values:
        if data.count(value)>1:
            numRepeatedValues += 1
            convergedValue = value
    if numRepeatedValues>1:
        print "Error! Multiple values of "+parametersToVary[-1]+" were repeated."
        exit(1)
    thisScanResults = []
    for value in values:
        if value==convergedValue:
            index = baseCaseIndex
        else:
            index = data.index(value)
        thisScanResults.append(outputs[index])
    print "A scan was performed in "+parametersToVary[-1]+", and the repeated value was "+str(convergedValue)
    print "Values of the scanned parameter: ",abscissae[-1]
    convergeds.append(convergedValue)
    quantities.append(numpy.array(thisScanResults))

# Check whether Nxi was scanned:
data = Nxis
values = uniq(data)
values.sort()
if len(values)>1:
    # Yes, a scan was performed in this variable.
    parametersToVary.append("Nxi")
    abscissae.append(values)
    # Ensure only 1 value is repeated:
    numRepeatedValues = 0
    for value in values:
        if data.count(value)>1:
            numRepeatedValues += 1
            convergedValue = value
    if numRepeatedValues>1:
        print "Error! Multiple values of "+parametersToVary[-1]+" were repeated."
        exit(1)
    thisScanResults = []
    for value in values:
        if value==convergedValue:
            index = baseCaseIndex
        else:
            index = data.index(value)
        thisScanResults.append(outputs[index])
    print "A scan was performed in "+parametersToVary[-1]+", and the repeated value was "+str(convergedValue)
    print "Values of the scanned parameter: ",abscissae[-1]
    convergeds.append(convergedValue)
    quantities.append(numpy.array(thisScanResults))

# Check whether NL was scanned:
data = NLs
values = uniq(data)
values.sort()
if len(values)>1:
    # Yes, a scan was performed in this variable.
    parametersToVary.append("NL")
    abscissae.append(values)
    # Ensure only 1 value is repeated:
    numRepeatedValues = 0
    for value in values:
        if data.count(value)>1:
            numRepeatedValues += 1
            convergedValue = value
    if numRepeatedValues>1:
        print "Error! Multiple values of "+parametersToVary[-1]+" were repeated."
        exit(1)
    thisScanResults = []
    for value in values:
        if value==convergedValue:
            index = baseCaseIndex
        else:
            index = data.index(value)
        thisScanResults.append(outputs[index])
    print "A scan was performed in "+parametersToVary[-1]+", and the repeated value was "+str(convergedValue)
    print "Values of the scanned parameter: ",abscissae[-1]
    convergeds.append(convergedValue)
    quantities.append(numpy.array(thisScanResults))

# Check whether Nx was scanned:
data = Nxs
values = uniq(data)
values.sort()
if len(values)>1:
    # Yes, a scan was performed in this variable.
    parametersToVary.append("Nx")
    abscissae.append(values)
    # Ensure only 1 value is repeated:
    numRepeatedValues = 0
    for value in values:
        if data.count(value)>1:
            numRepeatedValues += 1
            convergedValue = value
    if numRepeatedValues>1:
        print "Error! Multiple values of "+parametersToVary[-1]+" were repeated."
        exit(1)
    thisScanResults = []
    for value in values:
        if value==convergedValue:
            index = baseCaseIndex
        else:
            index = data.index(value)
        thisScanResults.append(outputs[index])
    print "A scan was performed in "+parametersToVary[-1]+", and the repeated value was "+str(convergedValue)
    print "Values of the scanned parameter: ",abscissae[-1]
    convergeds.append(convergedValue)
    quantities.append(numpy.array(thisScanResults))

# Check whether NxPotentialsPerVth was scanned:
data = NxPotentialsPerVths
values = uniq(data)
values.sort()
if len(values)>1:
    # Yes, a scan was performed in this variable.
    parametersToVary.append("NxPotentialsPerVth")
    abscissae.append(values)
    # Ensure only 1 value is repeated:
    numRepeatedValues = 0
    for value in values:
        if data.count(value)>1:
            numRepeatedValues += 1
            convergedValue = value
    if numRepeatedValues>1:
        print "Error! Multiple values of "+parametersToVary[-1]+" were repeated."
        exit(1)
    thisScanResults = []
    for value in values:
        if value==convergedValue:
            index = baseCaseIndex
        else:
            index = data.index(value)
        thisScanResults.append(outputs[index])
    print "A scan was performed in "+parametersToVary[-1]+", and the repeated value was "+str(convergedValue)
    print "Values of the scanned parameter: ",abscissae[-1]
    convergeds.append(convergedValue)
    quantities.append(numpy.array(thisScanResults))

# Check whether xMax was scanned:
data = xMaxs
values = uniq(data)
values.sort()
if len(values)>1:
    # Yes, a scan was performed in this variable.
    parametersToVary.append("xMax")
    abscissae.append(values)
    # Ensure only 1 value is repeated:
    numRepeatedValues = 0
    for value in values:
        if data.count(value)>1:
            numRepeatedValues += 1
            convergedValue = value
    if numRepeatedValues>1:
        print "Error! Multiple values of "+parametersToVary[-1]+" were repeated."
        exit(1)
    thisScanResults = []
    for value in values:
        if value==convergedValue:
            index = baseCaseIndex
        else:
            index = data.index(value)
        thisScanResults.append(outputs[index])
    print "A scan was performed in "+parametersToVary[-1]+", and the repeated value was "+str(convergedValue)
    print "Values of the scanned parameter: ",abscissae[-1]
    convergeds.append(convergedValue)
    quantities.append(numpy.array(thisScanResults))

# Check whether solverTolerances was scanned:
data = [-math.log10(x) for x in solverTolerances]
values = uniq(data)
values.sort()
if len(values)>1:
    # Yes, a scan was performed in this variable.
    parametersToVary.append("-log10(solverTolerance)")
    abscissae.append(values)
    # Ensure only 1 value is repeated:
    numRepeatedValues = 0
    for value in values:
        if data.count(value)>1:
            numRepeatedValues += 1
            convergedValue = value
    if numRepeatedValues>1:
        print "Error! Multiple values of "+parametersToVary[-1]+" were repeated."
        exit(1)
    thisScanResults = []
    for value in values:
        if value==convergedValue:
            index = baseCaseIndex
        else:
            index = data.index(value)
        thisScanResults.append(outputs[index])
    print "A scan was performed in "+parametersToVary[-1]+", and the repeated value was "+str(convergedValue)
    print "Values of the scanned parameter: ",abscissae[-1]
    convergeds.append(convergedValue)
    quantities.append(numpy.array(thisScanResults))


# ***************************************************
# Now make the plot
# ***************************************************

fig = plt.figure()
fig.patch.set_facecolor('white')

numParameters = len(parametersToVary)
numQuantities = numRows
numCols = numParameters

maxs = []
mins = []
for iQuantity in range(numQuantities):
    thisMax = quantities[0][:,iQuantity].max()
    thisMin = quantities[0][:,iQuantity].min()
    if numRuns>1:
        for iParameter in range(numParameters-1):
            thisMax = max(thisMax,quantities[iParameter+1][:,iQuantity].max())
            thisMin = min(thisMin,quantities[iParameter+1][:,iQuantity].min())
    if thisMin >= thisMax:
        thisMin -= 0.5
        thisMax += 0.5
    maxs.append(thisMax)
    mins.append(thisMin)

for iQuantity in range(numQuantities):
    for iParameter in range(numParameters):
        plt.subplot(numRows,numCols,iParameter+1+(iQuantity)*numParameters)
        plt.plot(abscissae[iParameter],quantities[iParameter][:,iQuantity],'.-')
        if iQuantity==numQuantities-1:
            plt.xlabel(parametersToVary[iParameter])
        else:
            if hideRepeatedScales:
                plt.gca().axes.xaxis.set_ticklabels([])
        if iParameter==0:
            plt.ylabel(yAxisLabels[iQuantity])
        else:
            if hideRepeatedScales:
                plt.gca().axes.yaxis.set_ticklabels([])
        plt.ylim(mins[iQuantity],maxs[iQuantity])
        plt.plot([convergeds[iParameter],convergeds[iParameter]], [mins[iQuantity],maxs[iQuantity]], 'r')


plt.show()

