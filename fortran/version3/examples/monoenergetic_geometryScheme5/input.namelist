! Input file for SFINCS:
! The Stellarator Fokker-Planck Iterative Neoclassical Conservative Solver.
! Version 3

! Dimensional quantities in this program are normalized to "reference" values:
! \bar{B} = reference magnetic field, typically 1 Tesla.
! \bar{R} = reference length, typically 1 meter.
! \bar{n} = reference density, typically 10^19 m^{-3}, 10^20 m^{-3}, or something similar.
! \bar{m} = reference mass, typically either the mass of hydrogen or deuterium.
! \bar{T} = reference temperature in energy units, typically 1 eV or 1 keV.
! \bar{v} = \sqrt{2 * \bar{T} / \bar{m}} = reference speed
! \bar{Phi} = reference electrostatic potential, typically 1 V or 1 kV.

! You can choose any reference parameters you like, not just the values
! suggested here. The code "knows" about the reference values only through
! the 3 combinations Delta, alpha, and nu_n, input below.

!ss scanType = 1

&general
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! General program options:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  RHSMode = 3
  ! Option related to the number of right-hand sides (i.e. inhomogeneous drive terms) for which the kinetic equation is solved.
  ! 1: Solve for a single right-hand side. This is the usual setting.
  ! 2: Solve for 3 right-hand sides to get the 3x3 transport matrix. Presently implemented only for 1 species.
  ! 3: Solve for the 2x2 monoenergetic transport coefficients. When this option is chosen, Nx is set to 1 and only 1 species is used.

  outputFilename = "sfincsOutput.h5"

  ! If the following switch is set to true, a Matlab m-file is created which
  ! stores the matrix, right-hand side, and solution vector.  If an iterative solver is used,
  ! the preconditioner matrix is also saved.
  ! PETSc usually generates an error message if the size of the linear system is more then 1400 x 1400,
  ! so usually this setting should be false.
!  saveMatlabOutput = .true.
  saveMatlabOutput = .false.

  MatlabOutputFilename = "sfincsMatrices.m"

  ! If the following switch is set to true, the matrix, right-hand-side, and solution of the
  ! linear system will be saved in PETSc's binary format.  The preconditioner matrix will also
  ! be saved if tryIterativeSolver == .true.

  !saveMatricesAndVectorsInBinary = .true.
  saveMatricesAndVectorsInBinary = .false.

  binaryOutputFilename = "sfincsBinary"

  ! If the parameter below is false, the linear system will not actually be solved.
  ! Sometimes it is useful to run the code without solving the system in order to quickly
  ! output profiles or for debugging.
  solveSystem = .true.
!  solveSystem = .false.
/

&geometryParameters

  inputRadialCoordinate = 3
  inputRadialCoordinateForGradients = 1
  ! These 2 parameters select which radial coordinate is used to specify the input.
  ! inputRadialCoordinate only affects the "wish" parameters that select the flux surface of interest.
  ! inputRadialCoordinateForGradients determines the radial coordinate used to specify the gradients of density, temperature, and electrostatic potential.
  !
  ! 0 = Input radial coordinate is psiHat, which is the toroidal flux divided by 2 pi and normalized by RBar^2 * BBar.
  !     In this approach, aBar and normradius_wish are ignored (unless normradius_wish is required for the magnetic geometry.)
  !
  ! 1 = Input radial coordinate is psi_N = psi / psi_a = psiHat / psiAHat, i.e. the toroidal flux normalized to its value at the last closed flux surface.
  !     In this approach, aBar and normradius_wish are ignored (unless normradius_wish is required for the magnetic geometry.)
  !
  ! 2 = Input radial coordinate is rHat = aHat * sqrt(psi_N), i.e. the effective minor radius normalized to RBar.
  !     In this approach, both aBar and normradius_wish are required.
  !
  ! 3 = Input radial coordinate is r_N = sqrt(psi_N), i.e. the effective minor radius normalized to the last closed flux surface.
  !     In this approach, aBar is ignored but normradius_wish is required.
  !
  ! Whichever values are specified, output quantities will be given with respect to all of these radial coordinates.

  ! Choose the radial coordinate of the flux surface to use.
  ! No more than 1 of these next 4 variables will be used, depending on inputRadialCoordinate:
  psiHat_wish = -1
  psiN_wish = -1
  rHat_wish = -1
  rN_wish = 0.5
  ! For geometryScheme = 1, the radial coordinate will be exactly the specified value.
  ! For geometryScheme = 11 or 12, the magnetic geometry will be used from the nearest available surface in the geometry input file.
  ! For geometryScheme = 2, 3, or 4, all these values will be ignored, and the surface at rN = 0.5 will be used.

  geometryScheme = 5
  ! 1 = Three-helicity model
  ! 2 = Three-helicity approximation of the LHD standard configuration at rN = 0.5
  ! 3 = Four-helicity approximation of the LHD inward-shifted configuration at rN = 0.5
  ! 4 = Three-helicity approximation of the W7-X standard configuration at rN = 0.5
  ! 5 = Read the magnetic geometry from a VMEC wout file specified as "equilibriumFile" below. The file can be
  !     either ASCII format or netCDF format. (SFINCS will auto-detect the format.)
  ! 11= Read the boozer coordinate data from the file specified as "equilibriumFile" below (stellarator symmetric file)
  ! 12= Read the boozer coordinate data from the file specified as "equilibriumFile" below (non-stellarator symmetric file)
 

  ! The next few options only matter for geometryScheme = 1, in which the magnetic field is taken to have the form
  ! B = BBar * B0OverBBar * [1 + epsilon_t * cos(theta) + epsilon_h * cos(helicity_l * theta - helicity_n * zeta)]
  !                            + epsilon_antisymm * sin(helicity_antisymm_l * theta - helicity_antisymm_n * zeta)]

  B0OverBBar = 0.7d+0

  GHat = 1.27d+0
  ! G is c/2 * the poloidal current outside the flux
  ! surface. Equivalently, G is the coefficient of grad zeta in the
  ! covariant representation of vector B. GHat is G normalized by \bar{B}\bar{R}.

  IHat = 0.8d+0
  ! I is c/2 * the toroidal current inside the flux
  ! surface. Equivalently, I is the coefficient of grad theta in the
  ! covariant representation of vector B. IHat is I normalized by \bar{B}\bar{R}.

  iota = 1.31d+0
  ! iota is the rotational transform = 1 / (safety factor q)

  epsilon_t = 0.13d+0

  epsilon_h = 0.1d+0
  
  helicity_l = 2
  helicity_n = 5

  epsilon_antisymm = 0.0d+0
  helicity_antisymm_l = 3	
  helicity_antisymm_n = 0

  ! psiAHat = psi_a / (\bar{B} * \bar{R}^2) (in both Gaussian and SI units)
  ! where 2*pi*psi_a is the toroidal flux at the last closed flux surface
  ! (the surface where psi_N = 1.)
  ! The value of psiAHat here is over-written for geometryScheme = 2, 3, 11 and 12.
  psiAHat = 0.03d+0

  aHat = 0.1
  ! aHat is the effective minor radius at the last closed flux surface in units of RBar.
  ! Sfincs only uses aBar for converting input and output quantities between units of flux and units of RBar.
  ! For geometryScheme .ne. 1, the value of aHat here will be ignored.

  ! End of options that only matter for geometryScheme = 1.

  ! This next option only matters for geometryScheme = 5 (Read a VMEC "wout" file):
  VMECRadialOption = 1
  ! 0: Use the exact *_wish flux surface requested, by interpolating from the VMEC radial grid.
  ! 1: Use a surface that may be slightly different from *_wish to get the nearest available flux surface from VMEC's HALF grid.  
  !    The components of B in VMEC are stored on the half grid, so interpolation is then unnecessary.
  ! 2: Use a surface that may be slightly different from *_wish to get the nearest available flux surface from VMEC's FULL grid.  
  !    I'm not sure why you would want this, but the feature is implemented for completeness.

  ! The remaining options only matter for geometryScheme = 5, 11, and 12:

  equilibriumFile = "../../../../equilibria/wout_w7x_standardConfig.nc"

  min_Bmn_to_load = 0
  !Filter out any Bmn components smaller than this.

/

&speciesParameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Species parameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  ! Zs          = charges of each species, in units of the proton charge e
  ! mHats       = masses of each species, normalized to the reference mass \bar{m}
  ! nHats       = densities of each species, normalized to the reference density \bar{n}
  ! THats       = temperatures of each species, normalized to the reference temperature \bar{T}
  ! dnHatdpsiNs = radial gradient of the density of each species with respect to the normalized toroidal flux psi_N, normalized to the reference density \bar{n}
  ! dTHatdpsiNs = radial gradient of the temperature of each species with respect to the normalized toroidal flux psi_N, normalized to the reference temperature \bar{T}

  Zs = 1
  mHats = 1
  nHats = 1.0d+0
  THats = 1.0d+0
  ! Only 1 of the following 4 pairs will be used, depending on inputRadialCoordinateForGradients:
  dNHatdpsiHats = 0
  dTHatdpsiHats = 0
  dNHatdpsiNs = 1d+0
  dTHatdpsiNs = 0
  dNHatdrHats = 0
  dTHatdrHats = 0
  dNHatdrNs = 0
  dTHatdrNs = 0

/

&physicsParameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Physics parameters:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  ! Roughly speaking, Delta is rho_* at the reference parameters.
  ! More precisely, 
  ! Delta = c * \bar{m} * \bar{v} / (e * \bar{B} * \bar{R}) in Gaussian units,
  ! Delta =     \bar{m} * \bar{v} / (e * \bar{B} * \bar{R}) in SI units,
  ! where
  ! c = speed of light
  ! e = proton charge

  Delta = 4.5694d-3  ! reference values: \bar{T}=1 keV, \bar{n}=10^20 m^-3,
                     ! \bar{Phi}=1 kV, \bar{B}=1 T, \bar{R}=1 m, proton mass

  ! alpha = e * \bar{Phi} / \bar{T} (in both Gaussian and SI units)
  ! where again e = proton charge.
  alpha = 1.0d+0

  ! Inductive electric field (often 0).
  ! EParallelHat = <E dot B> * \bar{R} / (\bar{Phi} * \bar{B})  (in both Gaussian and SI units)
  ! where
  ! E = electric field vector
  ! B = magnetic field vector
  ! < ... > denotes a flux surface average.
  EParallelHat = 0

  ! Radial electric field
  ! Only 1 of the following 4 values will be used, depending on inputRadialCoordinateForGradients:
  dPhiHatdpsiHat = 0.0d+0
  dPhiHatdpsiN   = 0.0d+0
  dPhiHatdrHat   = 0.0d+0
  dPhiHatdrN     = 0.0d+0

  ! nu_n is the collisionality at the reference parameters.
  ! More precisely, nu_n = \bar{nu} * \bar{R} / \bar{v} (in both Gaussian and SI units)
  ! where \bar{nu} is the dimensional collision frequency at the reference parameters:
  !
  !                  4 * sqrt{2*pi} * \bar{n} * e^4 * ln(Lambda)
  ! \bar{nu} = -----------------------------------------------------------   (SI units)
  !             3 * (4 * pi * epsilon_0)^2 * sqrt(\bar{m}} * \bar{T}^(3/2)
  !
  ! or, equivalently,
  !
  !                  4 * sqrt{2*pi} * \bar{n} * e^4 * ln(Lambda)
  ! \bar{nu} = -----------------------------------------------------------   (Gaussian units)
  !                       3 * sqrt(\bar{m}} * \bar{T}^(3/2)
  !

  ! For THat=1, mHat=1, nHat=1,
  ! then nu_n = nuPrime * B0OverBBar / (GHat + iota * IHat)
  ! For W7-X, then nu_n = nuPrime * 
  ! For LHD, then, nu_n = nuPrime * 0.172714565
  nu_n = 0.172714565d+0

  !nu_n = 8.4774d-3  ! reference values: \bar{T}=1 keV, \bar{n}=10^20 m^-3,
                    ! \bar{Phi}=1 kV, \bar{B}=1 T, \bar{R}=1 m, proton mass

  collisionOperator = 0
  ! 0 = Full linearized Fokker-Planck operator
  ! 1 = pitch-angle scattering with no momentum-conserving term

  constraintScheme = -1
  ! -1 = automatic: if collisionOperator==0 then set constraintScheme=1, 
  !                 otherwise set constraintScheme=2.
  !  0 = no constraints
  !  1 = 2 constraints: <n1>=0 and <p1>=0
  !  2 = Nx constraints: <f(L=0)>=0 at each x
  ! You should probably set constraintScheme to -1 except in rare circumstances.

  ! To use one of the 4 most common trajectory models, the remaining parameters
  ! in this namelist should be set as follows:
  !
  ! Full trajectories:
  !   includeXDotTerm = .true.
  !   includeElectricFieldTermInXiDot = .true.
  !   useDKESExBDrift = .false.
  !   include_fDivVE_term = .false.
  !
  ! Partial trajectories: (non-conservative, as defined in the paper.)
  !   includeXDotTerm =	  .false.
  !   includeElectricFieldTermInXiDot = .false.
  !   useDKESExBDrift = .false.
  !   include_fDivVE_term = .false.
  !
  ! Conservative partial trajectories: (Not discussed in the paper.)
  !   includeXDotTerm =	 .false.
  !   includeElectricFieldTermInXiDot = .false.
  !   useDKESExBDrift = .false.
  !   include_fDivVE_term = .true.
  !
  ! DKES trajectories:
  !   includeXDotTerm =	.false.
  !   includeElectricFieldTermInXiDot = .false.
  !   useDKESExBDrift = .true.
  !   include_fDivVE_term = .false.

!  includeXDotTerm = .true.
  includeXDotTerm = .false.

!  includeElectricFieldTermInXiDot = .true.
  includeElectricFieldTermInXiDot = .false.

  useDKESExBDrift = .true.
!  useDKESExBDrift = .false.
  ! If useDKESExBDrift=true, the ExB drift term in the df/dtheta and df/dzeta terms is taken
  ! to be E x B / <B^2> instead of E x B / B^2.

  !include_fDivVE_term = .true.
  include_fDivVE_term = .false.
  ! If true, a term f_{s1} div (v_E) is included in the kinetic equation.
  ! This term may make sense to include with the partial trajectory model
  ! as it restores Liouville's theorem (particle conservation) and eliminates 
  ! the need for either a particle or heat source.

  ! If incluePhi1 = .true., the quasineutrality equation will be solved along with the drift-kinetic equation,
  ! and terms involving variation of the electrostatic potential on a flux surface will be included in the
  ! drift-kinetic equation.
  !includePhi1 = .true.
  includePhi1 = .false.

  ! If true, include the term from the linearized collision operator acting on f_Maxwellian,
  ! which is nonzero for inter-species Fokker-Planck collisions	when temperatures
  ! are	unequal. This term acts	to equilibrate the temperatures	between	species.
  !includeTemperatureEquilibrationTerm = .true.
  includeTemperatureEquilibrationTerm = .false.

  ! If nonlinear = .true., the code will iterate to find the self-consistent poloidal variation
  ! of the electrostatic potential, including the nonlinear coupling between Phi_1 and f_1
  !nonlinear = .true.
  nonlinear = .false.
/

&resolutionParameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Numerical resolution parameters:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  
  ! Number of grid points in the poloidal direction.
  ! Memory and time requirements DO depend strongly on this parameter.
  Ntheta = 17
!ss NthetaMinFactor = 1
!ss NthetaMaxFactor = 2
!ss NthetaNumRuns = 10

  ! Number of grid points in the toroidal direction
  ! (per identical segment of the stellarator.)
  ! Memory and time requirements DO depend strongly on this parameter.
  Nzeta = 31
!ss NzetaMinFactor = 1
!ss NzetaMaxFactor = 2
!ss NzetaNumRuns = 10

  ! Number of Legendre polynomials used to represent the distribution function.
  ! Memory and time requirements DO depend strongly on this parameter.
  ! The value of this parameter required for convergence depends strongly on
  ! the collisionality. At high collisionality, this parameter can be as low
  ! as ~ 5. At low collisionality, this parameter may need to be many 10s or
  ! even > 100 for convergence.
  Nxi = 24
!ss NxiMinFactor = 1
!ss NxiMaxFactor = 2
!ss NxiNumRuns = 10
  
  ! Number of Legendre polynomials used to represent the Rosenbluth
  ! potentials. Except in exceptional circumstances, this number should be 4.
  ! Memory and time requirements do NOT depend strongly on this parameter.
  NL = 4
!ss NLMinFactor = 1
!ss NLMaxFactor = 2
!ss NLNumRuns = 0
  
  ! Number of grid points in energy used to represent the distribution function.
  ! Memory and time requirements DO depend strongly on this parameter.
  ! This parameter almost always needs to be at least 5.
  ! Usually a value in the range 5-8 is plenty for convergence, though sometimes
  ! you may need to go up to 10-15.
  Nx = 1
!ss NxMinFactor = 1
!ss NxMaxFactor = 2
!ss NxNumRuns = 0

  ! Number of grid points in energy used to represent the Rosenbluth potentials.
  ! Memory and time requirements do NOT depend strongly on this parameter.
  NxPotentialsPerVth = 40
!ss NxPotentialsPerVthMinFactor = 1
!ss NxPotentialsPerVthMaxFactor = 2
!ss NxPotentialsPerVthNumRuns = 0
  
  ! Maximum normalized speed for the Rosenbluth potential grid.
  ! Memory and time requirements do NOT depend strongly on this parameter.
  ! Typically a value of 5 is good.
  xMax = 5.0d+0
!ss xMaxMinFactor = 1
!ss xMaxMaxFactor = 2
!ss xMaxNumRuns = 0

  ! Tolerance used to define convergence of the Krylov solver.
  ! This parameter does not affect memory requirements but it does affect the
  ! time required for solution somewhat
  solverTolerance = 1d-6
!ss solverToleranceMinFactor = 0.1
!ss solverToleranceMaxFactor = 10
!ss solverToleranceNumRuns = 0

  forceOddNthetaAndNzeta = .true.
  ! If forceOddNthetaAndNzeta is set to true, 1 is added to Ntheta any time a run is attempted with even Ntheta,
  ! and 1 is added to Nzeta any time a run is attempted with even Nzeta.
  ! This can be useful because the iterative solvers sometimes do not work with even Ntheta or Nzeta.
  ! This parameter should be true unless you know what you are doing.
/

&otherNumericalParameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Other numerical parameters:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
  thetaDerivativeScheme = 2
  zetaDerivativeScheme = 2
  ! Options for thetaDerivativeScheme and zetaDerivativeScheme:
  ! 0 = Spectral collocation
  ! 1 = 2nd order finite differences (3-point stencil)
  ! 2 = 4th order finite differences (5-point stencil)
  ! You should set these parameters to 2 except in rare circumstances.

  ! If 'useIterativeSolver' is set to false, a sparse direct solver
  ! will be used. The direct solver is faster for small problems and always yields a solution.
  ! For large problems, the iterative solver will usually be faster and will use much
  ! less memory, but it may not always converge.

  useIterativeSolver = .true.
!  useIterativeSolver = .false.

  whichParallelSolverToFactorPreconditioner = 2
  ! Options for whichParallelSolverToFactorPreconditioner:
  ! 1 = use mumps if it is detected, otherwise use superlu_dist
  ! 2 = force use of superlu_dist, if it is available
  !
  ! The value of whichParallelSolverToFactorPreconditioner is only used when morpheus is run with 
  ! more MPI processors than runs desired (1 if a single run, or more if a convergence scan.)
  ! Otherwise, matrices are not distributed across processors, so the PETSc built-in serial sparse
  ! direct solver is used to factor the preconditioner.

  PETSCPreallocationStrategy = 1
  ! This setting changes the estimated number of nonzeros (nnz) used for allocating memory for the matrix and preconditioner.
  ! 0 = Old method with high estimated nnz. This method works consistently but uses WAY more memory than necessary.
  ! 1 = New method with lower, more precise estimated nnz.  This method has been less thoroughly tested, but it should use much less memory.
/

&preconditionerOptions
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Settings for how to simplify the linear system
  ! to obtain the preconditioner:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  preconditioner_species = 1
  ! 0 = keep full species coupling
  ! 1 = drop all cross-species coupling

  preconditioner_x = 1
  ! 0 = keep full x coupling
  ! 1 = drop everything off-diagonal in x
  ! 2 = keep only upper-triangular part in x
  ! 3 = keep only the tridiagonal terms in x
  ! 4 = keep only the diagonal and superdiagonal in x

  preconditioner_x_min_L = 0
  ! The x structure of the matrix will only be simplified for L >= this value.
  ! Set preconditioner_x_min_L=0 to simplify the matrix for every L.

  preconditioner_theta = 0
  ! 0 = keep full theta coupling
  ! 1 = use a 3-point finite difference stencil for d/dtheta

  preconditioner_zeta = 0
  ! 0 = keep full zeta coupling
  ! 1 = use a 3-point finite difference stencil for d/dzeta

  preconditioner_xi = 0
  ! 0 = keep full xi coupling
  ! 1 = drop terms that are +/- 2 from the diagonal in xi, 
  !     so preconditioner is tridiagonal in xi

/
